generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics", "tracing", "jsonprotocol", "extendedWhereUnique"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MENTOR
  STUDENT
  EO
}

enum Gender {
  MALE
  FEMALE
}

enum Campus {
  GANESHA
  JATINANGOR
  CIREBON
}

enum Status {
  HADIR
  TIDAK_HADIR
  IZIN_DITERIMA
  IZIN_PENDING
  IZIN_DITOLAK
}

enum Lembaga {
  HMJ
  UKM
  BSO
  PUSAT
}

enum AssignmentType {
  MANDATORY
  DAILY_QUEST
  SIDE_QUEST
}

model User {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nim          String   @unique
  passwordHash String
  role         UserRole @default(STUDENT)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  profile      Profile?

  friendInitiated Friendship[] @relation("initiator")
  friendReceived  Friendship[] @relation("receiver")

  sentMessages     Message[] @relation("sender")
  receivedMessages Message[] @relation("receiver")

  firstUserRoom  RoomChat[] @relation("firstUserRoom")
  secondUserRoom RoomChat[] @relation("secondUserRoom")

  ResetToken ResetToken[]

  student StudentMentor[] @relation("student")
  mentor  StudentMentor[] @relation("mentor")

  groupRelation GroupRelation[] @relation("group")

  attendance AttendanceRecord[] @relation("attendance")

  submission   AssignmentSubmission[] @relation("submission")
  firstMatch   UserMatch[]            @relation("firstMatch")
  secondMatch  UserMatch[]            @relation("secondMatch")
  ChatReport   ChatReport[]
  FeedReaction FeedReaction[]
  FeedRead     FeedRead[]

  @@unique([createdAt, id]) // Unique for cursor pagination
}

model Profile {
  userId       String  @id @db.Uuid
  user         User    @relation(fields: [userId], references: [id])
  name         String
  pin          String  @unique @db.Char(6)
  faculty      String? @db.VarChar(50)
  gender       Gender?
  campus       Campus?
  email        String? @unique
  image        String?
  bio          String  @default("")
  instagram    String?
  visitedCount Int     @default(0)
  friendCount  Int     @default(0)
  point        Int     @default(0)

  updatedAt DateTime @default(now()) @updatedAt

  @@index([point(sort: Desc)])
  @@index([pin])
}

model ResetToken {
  userId     String   @id @db.Uuid
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  token      String
  createdAt  DateTime @default(now()) @db.Timestamp()
  expireTime Int      @default(3600) // 1 hour
}

model Friendship {
  userInitiatorId String   @db.Uuid
  userInitiator   User     @relation("initiator", fields: [userInitiatorId], references: [id])
  userReceiverId  String   @db.Uuid
  userReceiver    User     @relation("receiver", fields: [userReceiverId], references: [id])
  createdAt       DateTime @default(now())
  accepted        Boolean  @default(false)

  @@id([userInitiatorId, userReceiverId])
}

model Message {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  senderId    String     @db.Uuid
  sender      User       @relation("sender", fields: [senderId], references: [id])
  receiverId  String     @db.Uuid
  receiver    User       @relation("receiver", fields: [receiverId], references: [id])
  message     String
  createdAt   DateTime   @default(now())
  userMatchId String?    @db.Uuid
  userMatch   UserMatch? @relation(fields: [userMatchId], references: [id])
  roomChatId  Int?
  roomChat    RoomChat?  @relation(fields: [roomChatId], references: [id])
  isRead      Boolean    @default(false)

  @@unique([createdAt, id]) // Unique for cursor pagination
  @@index([userMatchId])
  @@index([createdAt(sort: Desc)])
  @@index([receiverId, senderId])
  @@index([roomChatId])
}

// Dashboard Internal
model StudentMentor {
  id        String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studentId String @db.Uuid
  mentorId  String @db.Uuid

  student User @relation("student", fields: [studentId], references: [id])
  mentor  User @relation("mentor", fields: [mentorId], references: [id])
}

model Group {
  id    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  group Int

  groupRelation GroupRelation[] @relation("group")
}

model GroupRelation {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId  String @db.Uuid
  groupId String @db.Uuid

  user  User  @relation("group", fields: [userId], references: [id])
  group Group @relation("group", fields: [groupId], references: [id])
}

model AttendanceRecord {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date      DateTime
  status    Status   @default(TIDAK_HADIR)
  reason    String?  @db.Text
  studentId String   @db.Uuid
  eventId   String   @db.Uuid

  student User            @relation("attendance", fields: [studentId], references: [id])
  event   AttendanceEvent @relation("event", fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([studentId, eventId])
  @@index([studentId])
}

model AttendanceEvent {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String   @db.VarChar(50)
  startTime DateTime
  endTime   DateTime
  dayId     String   @db.Uuid

  day AttendanceDay @relation(fields: [dayId], references: [id], onDelete: Cascade)

  record AttendanceRecord[] @relation("event")
}

model AttendanceDay {
  id   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String   @db.VarChar(50)
  time DateTime @db.Date

  event AttendanceEvent[]
}

model Assignment {
  id          String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type        AssignmentType @default(MANDATORY)
  title       String         @db.VarChar(50)
  filePath    String?        @db.VarChar(255)
  description String?        @db.Text
  startTime   DateTime
  endTime     DateTime

  submission AssignmentSubmission[] @relation("submission")
}

model AssignmentSubmission {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  filePath     String?  @db.VarChar(255)
  score        Int?
  createdAt    DateTime @default(now())
  studentId    String   @db.Uuid
  assignmentId String   @db.Uuid

  student    User       @relation("submission", fields: [studentId], references: [id])
  assignment Assignment @relation("submission", fields: [assignmentId], references: [id], onDelete: Cascade)

  @@unique([studentId, assignmentId])
  @@index([studentId])
}

model ShortenedLink {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  source      String   @unique @db.VarChar(255)
  destination String   @unique @db.VarChar(255)
  clickCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model UserMatch {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstUserId  String       @db.Uuid
  firstUser    User         @relation("firstMatch", fields: [firstUserId], references: [id])
  secondUserId String       @db.Uuid
  secondUser   User         @relation("secondMatch", fields: [secondUserId], references: [id])
  createdAt    DateTime     @default(now())
  isRevealed   Boolean      @default(false)
  topic        String?
  endedAt      DateTime?
  messages     Message[]
  ChatReport   ChatReport[]

  @@index([firstUserId, secondUserId])
  @@index([firstUserId])
  @@index([secondUserId])
  @@index([endedAt])
}

model ChatReport {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  reportedUserId String    @db.Uuid
  reportedUser   User      @relation(fields: [reportedUserId], references: [id])
  userMatchId    String    @db.Uuid
  userMatch      UserMatch @relation(fields: [userMatchId], references: [id])
  message        String
  isResolved     Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
}

model ITBGotTalent {
  id         String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  day        String                  @db.VarChar(255)
  time       String                  @db.VarChar(255)
  registrant ITBGotTalentRegistrant?
}

model ITBGotTalentRegistrant {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  scheduleId String   @unique @db.Uuid
  teamName   String   @db.VarChar(255)
  contact    String
  teamMember String[]
  ktmPath    String   @db.VarChar(255)
  musicPath  String?  @db.VarChar(255)
  property   String[]

  schedule ITBGotTalent @relation(fields: [scheduleId], references: [id])
}

model ShowcaseBooking {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String   @db.VarChar(255)
  nim                 String   @unique
  lembaga             Lembaga  @default(PUSAT)
  lembagaName         String   @db.VarChar(255)
  position            String   @db.VarChar(255)
  secondPartyName     String   @db.VarChar(255)
  secondPartyPosition String   @db.VarChar(255)
  secondPartyContact  String   @db.VarChar(255)
  fakultas            String   @db.VarChar(255)
  jurusan             String   @db.VarChar(255)
  angkatan            String   @db.VarChar(255)
  lineId              String   @db.VarChar(255)
  waNumber            String   @db.VarChar(255)
  noise               Boolean  @default(false)
  kaos                Json[]   @db.Json
  total               Int
  method              String   @db.VarChar(255)
  mouPath             String   @db.VarChar(255)
  proofPath           String   @db.VarChar(255)
  token               String?  @unique @db.VarChar(50)
  createdAt           DateTime @default(now())

  bookedLocation BookedLocation?
}

model LocationBooking {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token     String   @unique @db.VarChar(50)
  locations String[] @db.VarChar(50)
}

model BookedLocation {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token    String @unique
  location String @unique @db.VarChar(50)

  showcase ShowcaseBooking @relation(fields: [token], references: [token])
}

model Feed {
  id            Int            @id @default(autoincrement())
  text          String
  attachmentUrl String?
  createdAt     DateTime       @default(now())
  feedReactions FeedReaction[]
  feedReads     FeedRead[]
}

model FeedReaction {
  feed     Feed   @relation(fields: [feedId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id])
  reaction String @db.VarChar(255)
  feedId   Int
  userId   String @db.Uuid

  @@id([feedId, userId, reaction])
  @@index([feedId])
}

model FeedRead {
  feed      Feed     @relation(fields: [feedId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  feedId    Int
  userId    String   @db.Uuid

  @@id([userId, feedId])
  @@index([feedId])
}

model Map {
  id            String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campus        String  @unique @db.VarChar(255)
  description   String? @db.Text
  baseLatitude  Decimal @db.Decimal(8, 6)
  baseLongitude Decimal @db.Decimal(9, 6)

  MapLocation MapLocation[]
}

model MapLocation {
  id            String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String  @unique @db.VarChar(255)
  subtitle      String? @db.VarChar(255)
  description   String? @db.Text
  baseLatitude  Decimal @db.Decimal(8, 6)
  baseLongitude Decimal @db.Decimal(9, 6)
  mapId         String  @db.Uuid

  Map      Map        @relation(fields: [mapId], references: [id])
  MapPhoto MapPhoto[]
}

model MapPhoto {
  id            String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  imageUrl      String  @db.VarChar(255)
  caption       String? @db.VarChar(255)
  mapLocationId String  @db.Uuid

  MapLocation MapLocation @relation(fields: [mapLocationId], references: [id])
}

model RoomChat {
  id           Int       @id @default(autoincrement())
  firstUserId  String    @db.Uuid
  secondUserId String    @db.Uuid
  firstUser    User      @relation("firstUserRoom", fields: [firstUserId], references: [id])
  secondUser   User      @relation("secondUserRoom", fields: [secondUserId], references: [id])
  Message      Message[]

  @@unique([firstUserId, secondUserId])
}

model Article {
  id    String @id
  likes Int
  views Int

  @@unique([id])
}
