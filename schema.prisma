generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics", "tracing", "jsonprotocol", "extendedWhereUnique"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MENTOR
  STUDENT
}

enum Gender {
  MALE
  FEMALE
}

enum Campus {
  GANESHA
  JATINANGOR
  CIREBON
}

enum Status {
  HADIR
  TIDAK_HADIR
  IZIN_DITERIMA
  IZIN_PENDING
  IZIN_DITOLAK
}

enum Lembaga {
  HMJ
  UKM
  PENGMAS
  DLL
}

model User {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nim          String   @unique
  passwordHash String
  role         UserRole @default(STUDENT)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  profile      Profile?

  friendInitiated Friendship[] @relation("initiator")
  friendReceived  Friendship[] @relation("receiver")

  sentMessages     Message[]    @relation("sender")
  receivedMessages Message[]    @relation("receiver")
  ResetToken       ResetToken[]

  groupRelation GroupRelation[] @relation("group")

  attendance AttendanceRecord[] @relation("attendance")

  submission  AssignmentSubmission[] @relation("submission")
  firstMatch  UserMatch[]            @relation("firstMatch")
  secondMatch UserMatch[]            @relation("secondMatch")

  @@unique([createdAt, id]) // Unique for cursor pagination
}

model Profile {
  userId       String  @id @db.Uuid
  user         User    @relation(fields: [userId], references: [id])
  name         String
  pin          String  @unique @db.Char(6)
  faculty      String? @db.VarChar(50)
  gender       Gender?
  campus       Campus?
  email        String? @unique
  image        String?
  bio          String  @default("")
  instagram    String?
  visitedCount Int     @default(0)
  friendCount  Int     @default(0)

  updatedAt DateTime @default(now()) @updatedAt
}

model ResetToken {
  userId     String   @id @db.Uuid
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  token      String
  createdAt  DateTime @default(now()) @db.Timestamp()
  expireTime Int      @default(3600) // 1 hour
}

model Friendship {
  userInitiatorId String   @db.Uuid
  userInitiator   User     @relation("initiator", fields: [userInitiatorId], references: [id])
  userReceiverId  String   @db.Uuid
  userReceiver    User     @relation("receiver", fields: [userReceiverId], references: [id])
  createdAt       DateTime @default(now())
  accepted        Boolean  @default(false)

  @@id([userInitiatorId, userReceiverId])
}

model Message {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  senderId    String     @db.Uuid
  sender      User       @relation("sender", fields: [senderId], references: [id])
  receiverId  String     @db.Uuid
  receiver    User       @relation("receiver", fields: [receiverId], references: [id])
  message     String
  createdAt   DateTime   @default(now())
  userMatchId String?    @db.Uuid
  userMatch   UserMatch? @relation(fields: [userMatchId], references: [id])
  isRead      Boolean    @default(false)

  @@unique([createdAt, id]) // Unique for cursor pagination
}

// Dashboard Internal
model Group {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  group    Int
  zoomLink String @db.VarChar(50)

  groupRelation GroupRelation[] @relation("group")
}

model GroupRelation {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId  String @db.Uuid
  groupId String @db.Uuid

  user  User  @relation("group", fields: [userId], references: [id])
  group Group @relation("group", fields: [groupId], references: [id])
}

model AttendanceRecord {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date      DateTime
  status    Status   @default(TIDAK_HADIR)
  reason    String?  @db.Text
  studentId String   @db.Uuid
  eventId   String   @db.Uuid

  student User            @relation("attendance", fields: [studentId], references: [id])
  event   AttendanceEvent @relation("event", fields: [eventId], references: [id])
}

model AttendanceEvent {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String   @db.VarChar(50)
  startTime DateTime
  endTime   DateTime
  dayId     String   @db.Uuid

  day AttendanceDay @relation(fields: [dayId], references: [id])

  record AttendanceRecord[] @relation("event")
}

model AttendanceDay {
  id   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String   @db.VarChar(50)
  time DateTime

  event AttendanceEvent[]
}

model Assignment {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String   @db.VarChar(50)
  filePath    String   @db.VarChar(255)
  description String   @db.Text
  startTime   DateTime
  endTime     DateTime

  submission AssignmentSubmission[] @relation("submission")
}

model AssignmentSubmission {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  filePath     String   @db.VarChar(255)
  score        Int
  createdAt    DateTime @default(now())
  studentId    String   @db.Uuid
  assignmentId String   @db.Uuid

  student    User       @relation("submission", fields: [studentId], references: [id])
  assignment Assignment @relation("submission", fields: [assignmentId], references: [id])
}

model ShortenedLink {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  source      String   @unique @db.VarChar(255)
  destination String   @unique @db.VarChar(255)
  clickCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model UserMatch {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstUserId  String       @db.Uuid
  firstUser    User         @relation("firstMatch", fields: [firstUserId], references: [id])
  secondUserId String       @db.Uuid
  secondUser   User         @relation("secondMatch", fields: [secondUserId], references: [id])
  createdAt    DateTime     @default(now())
  isRevelaed   Boolean      @default(true)
  topic        String?
  endedAt      DateTime?
  messages     Message[]
  ChatReport   ChatReport[]
}

model ChatReport {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userMatchId String    @db.Uuid
  userMatch   UserMatch @relation(fields: [userMatchId], references: [id])
  message     String
  isResolved  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model ITBGotTalent {
  id         String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  day        String                  @db.VarChar(255)
  time       String                  @db.VarChar(255)
  registrant ITBGotTalentRegistrant?
}

model ITBGotTalentRegistrant {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  scheduleId String   @unique @db.Uuid
  teamName   String   @db.VarChar(255)
  teamMember String[]
  ktmPath    String   @db.VarChar(255)
  musicPath  String?  @db.VarChar(255)
  property   String[]

  schedule ITBGotTalent @relation(fields: [scheduleId], references: [id])
}

model ShowcaseBooking {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(255)
  nim         String   @unique
  lembaga     Lembaga  @default(DLL)
  lembagaName String   @db.VarChar(255)
  position    String   @db.VarChar(255)
  lineId      String   @db.VarChar(255)
  waNumber    String   @db.VarChar(255)
  mouPath     String   @db.VarChar(255)
  createdAt   DateTime @default(now())

  bookedLocation BookedLocation?
}

model LocationBooking {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token     String   @db.VarChar(50)
  locations String[] @db.VarChar(50)
}

model BookedLocation {
  id         String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  showcaseId String @unique @db.Uuid
  location   String @db.VarChar(50)

  showcase ShowcaseBooking @relation(fields: [showcaseId], references: [id])
}
