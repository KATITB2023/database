generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics", "tracing", "jsonprotocol", "extendedWhereUnique"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MENTOR
  STUDENT
}

enum Gender {
  MALE
  FEMALE
}

enum Campus {
  GANESHA
  JATINANGOR
  CIREBON
}

model User {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nim          String   @unique
  passwordHash String
  role         UserRole @default(STUDENT)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  profile      Profile?

  friendInitiated Friendship[] @relation("initiator")
  friendReceived  Friendship[] @relation("receiver")

  sentMessages     Message[]    @relation("sender")
  receivedMessages Message[]    @relation("receiver")
  ResetToken       ResetToken[]

  @@unique([createdAt, id]) // Unique for cursor pagination
}

model Profile {
  userId       String  @id @db.Uuid
  user         User    @relation(fields: [userId], references: [id])
  name         String
  pin          String  @unique @db.Char(6)
  faculty      String? @db.VarChar(50)
  gender       Gender?
  campus       Campus?
  email        String? @unique
  image        String?
  bio          String  @default("")
  instagram    String?
  visitedCount Int     @default(0)
  friendCount  Int     @default(0)

  updatedAt DateTime @default(now()) @updatedAt
}

model ResetToken {
  userId     String   @id @db.Uuid
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  token      String
  createdAt  DateTime @default(now()) @db.Timestamp()
  expireTime Int      @default(3600) // 1 hour
}

model Friendship {
  userInitiatorId String   @db.Uuid
  userInitiator   User     @relation("initiator", fields: [userInitiatorId], references: [id])
  userReceiverId  String   @db.Uuid
  userReceiver    User     @relation("receiver", fields: [userReceiverId], references: [id])
  createdAt       DateTime @default(now())
  accepted        Boolean  @default(false)

  @@id([userInitiatorId, userReceiverId])
}

model Message {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  senderId   String   @db.Uuid
  sender     User     @relation("sender", fields: [senderId], references: [id])
  receiverId String   @db.Uuid
  receiver   User     @relation("receiver", fields: [receiverId], references: [id])
  message    String
  createdAt  DateTime @default(now())

  @@unique([createdAt, id]) // Unique for cursor pagination
}

// Ini playgroundnya obus
model Articles {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text         String
  keywords     String[]
  embeddings   Float[]
}